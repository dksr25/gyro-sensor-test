// SCSS setting
$root-em: 10;


// enable-IE8 속성은 IE8에서 rem을 지원하지 않기 때문에 일반 px unit로 폴백을 하기 위해 존재합니다.
$enable-IE8: false !default;

// mediaquery로 동작하는 PC용 페이지도 작업할 경우 true, 이미지는 /src/img/sprites/sprite-pc 에 추가해주세요.
$use_pc_sprite: true;

// media_query setting: width에 따라 동작함 서비스 특성에 따라 조정하세요.
$media_pc: "only screen and (min-width: 770px)";

// px, em fonts mixin >> @include fonts(14,18,300); or @include fonts(14,18px,"normal");
// font-size, line-height, font-weight를 지정하며 line-height는 font-size 대비 em으로 계산합니다.
// 하지만 line-height를 px를 지정하면 em으로 계산하지 않고 px로 바로 지정합니다.
// line-height, font-weight는 생략 가능
@mixin fonts($size: $initial-font-size, $lineHeight: false, $bold: false) {
  @if unitless($size) {
    $size: 1px * $size;
  }
  font-size: $size;
  $lhr: 0;
  @if $lineHeight {
    @if $lineHeight=="normal" {
      line-height: normal;
    }
    @else {
      @if unitless($lineHeight) {
        $lineHeight: 1px * $lineHeight;
        $lh: round($lineHeight / $size * 100) / 100;
        $lhr: $lh * 1em;
      }
      @else {
        $lhr: $lineHeight;
      }
      line-height: $lhr;
    }
  }
  @if $bold {
    font-weight: setFontWeight($bold);
  }
}

// rem unit fonts mixin 
// font-size 값은 px 단위 값 으로 단위 없이 입력합니다. 
//    root font-size 에 따라 rem 값으로 font-size 를 반환합니다.
// line-height 값은 1* px 단위 단위없이, 2* px단위 포함 입력, 3* normal 입력, 4* 생략 총 4가지 방법으로 입력 가능합니다.
//    1* 단위없이 입력하는 경우 font-size 대비 line-height 값을 소수점 두자리 아래 까지 반올림 하여 계산해줍니다. (ex.line-height: 1.33)
//    2* px 단위 포함하는 경우 그값 그대로 css 에 지정합니다. (ex.line-height: 16px)
//    3* normal 로 입력하는 경우 line-height: normal 로 지정됩니다.
//    4* 생략하는 경우 해당 mixin 이 line-height 관련 내용을 반환 하지 않습니다. 
//        >> @include rfonts(12) or @include rfonts(12,false,400)
// font-weight 값은 1* 100단위 숫자, 2* thin,light,normal,bold 등의 단어 입력, 3* 생략이 가능합니다.
//    1* 100단위 숫자의 경우 그대로 css에 반환합니다. (font-weight: 400)
//    2* 단어로 입력하는 경우 thin: 100, light: 300, normal: 400, bold: 700; 의 값을 반환합니다. 
//    3* 생략하는 경우 해당 mixin이 font-weight 관련 내용를 반환 하지 않습니다.
//        >> @include rfonts(12) or @include rfonts(12,16)
      
// @mixin rfonts($size: $initial-font-size, $lineHeight: false, $bold: false) {
//   $lhr: 0;
//   font-size: setRem($size);
//   @if $lineHeight {
//     @if $lineHeight=="normal" {
//       line-height: normal;
//     }
//     @else {
//       @if unitless($lineHeight) {
//         $lhr: round($lineHeight * 100 / $size) / 100;
//       }
//       @else {
//         $lhr: $lineHeight;
//       }
//       line-height: $lhr;
//     }
//   }
//   @if $bold {
//     font-weight: setFontWeight($bold);
//   }
// }

// rem unit fonts mixin >> @include rfonts(14,18,300); or @include rfonts(14,18px,"normal");
@mixin rfonts($size: $initial-font-size, $lineHeight: false, $bold: false) {
  $lhr: 0;
  @if $enable-IE8 {
    font-size: $size * 1px;
  }
  font-size: setRem($size);
  @if $lineHeight {
    @if unitless($lineHeight) {
      $lhr: setRem($lineHeight);
      @if $enable-IE8 {
        line-height: $lineHeight * 1px;
      }
      line-height: $lhr;
    }
    @else {
      $lhr: $lineHeight;
      line-height: $lhr;
    }
  }
  @if $bold {
    font-weight: setFontWeight($bold);
  }
}

@function setRem($size) {
  $remSize: round($size * 100 / $root-em) / 100;
  @return $remSize * 1rem;
}

@function setFontWeight($bold) {
  @if $bold=="thin" {
    @return 100;
  }
  @else if $bold=="light" {
    @return 300;
  }
  @else if $bold=="normal" {
    @return 400;
  }
  @else if $bold=="bold" {
    @return 700;
  }
  @else {
    @return $bold;
  }
}

// utilities etc.
// 접근성을 위한 텍스트 숨김 >> @extend %visuallyhidden;
// common.scss에서 .blind로 지정되어 있습니다. <span class="blind">안보임</span> 등
%visuallyhidden {
  margin: -1px !important;
  padding: 0 !important;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

// clear:both 대체 >> @extend %clearfix;
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

%clearfix-under {
  *zoom: 1;
  &:after {
    content: " ";
    display: table;
    clear: both;
  }
}

@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// 여러줄 말줄임 (only. webkit)
@mixin ellipsis-multiline($line) {
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
  word-break: break-all;
}

%imageButton {
  display: inline-block;
  box-sizing: border-box;
  border: 0;
  background-color: transparent;
  &>span {
    @extend %visuallyhidden;
  }
}

%textButton {
  display: inline-block;
  box-sizing: border-box;
  border: 0;
  background-color: transparent;
}

// 0.5 라인 > @extend %bg_t;
%bg_t {
  content: '';
  position: absolute;
  top: -1px;
  left: 0;
  width: 100%;
  height: 1px;
  border-width: 0 0 1px 0;
  border-style: solid;
  transform: scaleY(0.5);
}

%bg_u {
  content: '';
  position: absolute;
  left: 0;
  bottom: -1px;
  width: 100%;
  height: 1px;
  border-width: 0 0 1px 0;
  border-style: solid;
  transform: scaleY(0.5);
}

// 투명도 지정 > @include opacity(0.8);
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);
}

@mixin positionFixed {
  -webkit-backface-visibility: hidden;
  transform: translate3d(0, 0, 0);
  -webkit-user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  overflow-y: visible !important;
}

@mixin vertical-middle {
  top: 50%;
  transform: translateY(-50%);
}

@mixin hidpi($ratio: 1.3) {
  @media only screen and (min-resolution: round($ratio * 96dpi)),
  only screen and (min-resolution: $ratio * 1dppx) {
    @content;
  }
}

// z-index 관리 
@function z($name) {
  @if index($z-indexes, $name) {
      @return (length($z-indexes) - index($z-indexes, $name)) + 1;
  } @else {
      @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
      @return null;
  }
}

// border-radius
@mixin border-radius($border) {
  border-top-left-radius: $border;
  border-top-right-radius: $border;
  border-bottom-left-radius: $border;
  border-bottom-right-radius: $border;
}


//  
// safe area 
// - @include safeArea(true, padding, 10px 5px right left);
// - @include safeArea(false, padding, 5px bottom);
// - $all: true / false(multi / single)
// - $attr: selector
// - $val...: value direction
//
 @mixin safeArea($all: false, $attr: padding, $val...) {
  @if(($attr == padding or $attr == margin) and $all == false) {
    #{$attr}-#{separateVal($val, false)}: safeAresLoop($all, 'env', $attr, $val);
    #{$attr}-#{separateVal($val, false)}: safeAresLoop($all, 'constant', $attr, $val);
  } @else {
    #{$attr}: safeAresLoop($all, 'env', $attr, $val);
    #{$attr}: safeAresLoop($all, 'constant', $attr, $val);
  }
}

//  
// slice dircetion value
// - $boolean: true/false (value / direction) 
//
@function separateVal($val, $boolean) {
  $val: nth($val, 1);
  $returnVal: 0;
  $returnStringVal: 0;
  $stringIdx: 0;
  @for $i from 1 through length($val) {
    @if(type-of(nth($val, $i)) != string and $i == 1) {
      $returnVal: nth($val, $i);
    } @else if(type-of(nth($val, $i))!=string and $i != 1) {
      $returnVal: join($returnVal, nth($val, $i));
    }  @else if(type-of(nth($val, $i)) == string and $stringIdx == 0) {
      $stringIdx: $i;
      $returnStringVal: nth($val, $i);
    } @else {
      $returnStringVal: join($returnStringVal, nth($val, $i));
    }
  }

  @if ($boolean == true) {
    @return $returnVal;
  } @else {
    @return $returnStringVal;
  }
}

@function dirFlag($receiveDirFlag, $receiveDir) {
  @if($receiveDirFlag != length($receiveDir)) {
    @return $receiveDirFlag+1;
  }
  @return $receiveDirFlag;
}

@function safeAresLoop($all, $set, $attr, $val) {
  $dir: top, right, bottom, left;
  $receiveDir: separateVal($val, false);
  $receiveDirFlag: 1;
  $realVal: separateVal($val, true);
  $returnVal: '';
  $safeArea: '';

  // value 축약형 변환
  @if(length($realVal)==1) {
    $realVal: $realVal $realVal $realVal $realVal;
  } @else if(length($realVal)==2) {
    $realVal: nth($realVal, 1) nth($realVal, 2) nth($realVal, 1) nth($realVal, 2);
  } @else if(length($realVal)==3) {
    $realVal: nth($realVal, 1) nth($realVal, 2) nth($realVal, 3) nth($realVal, 2);
  } @else if(length($realVal)==4) {
    $realVal: $realVal;
  } @else {
    @error 'safeAresLoop length of $val error';
  }
  
  @for $i from 1 through 4 {
    // check $set (env or constant)
    @if($set==env) {
      $safeArea: env(safe-area-inset-#{nth($dir, $i)});
    } @else if($set==constant) {
      $safeArea: constant(safe-area-inset-#{nth($dir, $i)});
    } @else {
      @error 'safeAresLoop $set error';
    }

    // returnVal 초기 값
    @if($i == 1) {
      @if((nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) == true and nth($realVal, $i) == 0) {
        $returnVal: $safeArea;
        $receiveDirFlag: dirFlag($receiveDirFlag, $receiveDir);
      } @else if((nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) == true and nth($realVal, $i) != 0) {
        $returnVal: calc(#{nth($realVal, $i)} + #{$safeArea});
        $receiveDirFlag: dirFlag($receiveDirFlag, $receiveDir);
      } @else {
        $returnVal: nth($realVal, $i);
      }
    } @else {
      // sare-area multi
      @if($receiveDir != 0 and $all == true) {
        @if((nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) == true and nth($realVal, $i) == 0) {
          $returnVal: join($returnVal, $safeArea);
          $receiveDirFlag: dirFlag($receiveDirFlag, $receiveDir);
        } @else if((nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) == true and nth($realVal, $i) != 0) {
          $returnVal: join($returnVal, calc(#{nth($realVal, $i)} + #{$safeArea}));
          $receiveDirFlag: dirFlag($receiveDirFlag, $receiveDir);
        } @else {
          $returnVal: join($returnVal, nth($realVal, $i));
        }
      } @else if($receiveDir != 0 and $all == false) { // sare-area single
        @if((nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) == true) {
          @if(nth($realVal, $i) == 0) {
            $returnVal: $safeArea;
          } @else {
            $returnVal: calc(#{nth($realVal, $i)} + #{$safeArea});
          }
        }
      } @else {   // safe-area 방향 없을 때
        $returnVal: nth($realVal, $i);
        @warn 'please set drection of safe-area';
        @return $returnVal;
      }
    }
  }
  @return $returnVal;
}


